{"ast":null,"code":"import _objectSpread from \"/Users/aschulte/Desktop/mockups/auth-starter/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _defineProperty from \"/Users/aschulte/Desktop/mockups/auth-starter/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/aschulte/Desktop/mockups/auth-starter/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/aschulte/Desktop/mockups/auth-starter/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/aschulte/Desktop/mockups/auth-starter/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/aschulte/Desktop/mockups/auth-starter/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/aschulte/Desktop/mockups/auth-starter/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/aschulte/Desktop/mockups/auth-starter/src/components/Generate/index.js\";\nimport React, { Component } from 'react';\nimport DayPickerInput from \"react-day-picker/DayPickerInput\";\nimport \"react-day-picker/lib/style.css\";\nimport { formatDate, parseDate } from \"react-day-picker/moment\";\nimport \"moment/locale/it\";\nimport QRCode from 'qrcode-react';\nimport { Header, Input, Form, Button } from 'semantic-ui-react';\nvar INITIAL_STATE = {\n  startDate: '',\n  endDate: '',\n  uniqueID: '',\n  error: null\n};\n\nvar GenerateQRCode =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(GenerateQRCode, _Component);\n\n  function GenerateQRCode(props) {\n    var _this;\n\n    _classCallCheck(this, GenerateQRCode);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(GenerateQRCode).call(this, props));\n\n    _this.onSubmit = function (event) {\n      console.log(_this.uniqueID);\n      console.log(_this.startDate);\n    };\n\n    _this.onChange = function (event) {\n      _this.setState(_defineProperty({}, event.target.name, event.target.value));\n    };\n\n    _this.state = _objectSpread({}, INITIAL_STATE);\n    return _this;\n  }\n\n  _createClass(GenerateQRCode, [{\n    key: \"render\",\n    value: function render() {\n      var _React$createElement;\n\n      this.uniqueID = '1234567890123456789012345678901234567890';\n      var _this$state = this.state,\n          startDate = _this$state.startDate,\n          endDate = _this$state.endDate,\n          error = _this$state.error;\n      var isInvalid = startDate === null || endDate === null;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, React.createElement(Header, {\n        as: \"h1\",\n        textAlign: \"center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, \"Generate QR Code\"), React.createElement(Form, {\n        onSubmit: this.onSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, React.createElement(Form.Field, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, \"Title of event\"), React.createElement(Input, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      })), React.createElement(Form.Field, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, \"Select Event Dates\"), React.createElement(DayPickerInput, (_React$createElement = {\n        formatDate: formatDate,\n        value: this.state.startDate,\n        parseDate: \"\".concat(parseDate),\n        placeholder: \"\".concat(formatDate(new Date()))\n      }, _defineProperty(_React$createElement, \"value\", this.state.startDate), _defineProperty(_React$createElement, \"onChange\", this.onChange), _defineProperty(_React$createElement, \"__source\", {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      }), _defineProperty(_React$createElement, \"__self\", this), _React$createElement))), React.createElement(Form.Field, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, React.createElement(DayPickerInput, {\n        formatDate: formatDate,\n        parseDate: parseDate,\n        placeholder: \"\".concat(formatDate(new Date())),\n        value: this.state.endDate,\n        onChange: this.onChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      })), React.createElement(Button, {\n        fluid: true,\n        disabled: this.isInvalid,\n        type: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, \"Move to Payment\"), error && React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, error.message)), React.createElement(QRCode, {\n        value: this.uniqueID,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return GenerateQRCode;\n}(Component);\n\nexport { GenerateQRCode as default };","map":{"version":3,"sources":["/Users/aschulte/Desktop/mockups/auth-starter/src/components/Generate/index.js"],"names":["React","Component","DayPickerInput","formatDate","parseDate","QRCode","Header","Input","Form","Button","INITIAL_STATE","startDate","endDate","uniqueID","error","GenerateQRCode","props","onSubmit","event","console","log","onChange","setState","target","name","value","state","isInvalid","Date","message"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport DayPickerInput from \"react-day-picker/DayPickerInput\";\nimport \"react-day-picker/lib/style.css\";\nimport { formatDate, parseDate } from \"react-day-picker/moment\";\nimport \"moment/locale/it\";\n\nimport QRCode from'qrcode-react';\nimport { Header, Input, Form, Button } from 'semantic-ui-react'\n\nconst INITIAL_STATE = {\n    startDate: '',\n    endDate: '',\n    uniqueID: '',\n    error: null,\n  };\n\n  export default class GenerateQRCode extends Component {\n    constructor(props) {\n      super(props);\n      this.state = { ...INITIAL_STATE };\n    }\n  \n    onSubmit = event => {\n      console.log(this.uniqueID)\n      console.log(this.startDate)\n    };\n  \n    onChange = event => {\n      this.setState({ [event.target.name]: event.target.value });\n    };\n  \n    render() {\n      this.uniqueID = '1234567890123456789012345678901234567890'\n      const { startDate, endDate, error } = this.state;\n      const isInvalid = startDate === null || endDate === null;\n      \n      return (\n    <div>\n    <Header as='h1' textAlign='center'>Generate QR Code</Header>\n      <Form onSubmit={this.onSubmit}>\n      <Form.Field>\n        <label>Title of event</label>\n        <Input\n            />\n        </Form.Field>\n        <Form.Field>\n        <label>Select Event Dates</label>\n        <DayPickerInput\n              formatDate={formatDate}\n              value={this.state.startDate}\n              parseDate={`${parseDate}`}\n              placeholder={`${formatDate(new Date())}`}\n              value={this.state.startDate}\n              onChange={this.onChange}\n            />\n        </Form.Field>\n        <Form.Field>\n        <DayPickerInput\n                formatDate={formatDate}\n                parseDate={parseDate}\n                placeholder={`${formatDate(new Date())}`}\n                value={this.state.endDate}\n                onChange={this.onChange}\n              />\n        </Form.Field>\n        <Button fluid disabled={this.isInvalid} type=\"submit\">\n          Move to Payment\n        </Button>\n        {error && <p>{error.message}</p>}\n      </Form>\n      <QRCode value={this.uniqueID} />\n      </div>\n);\n}}"]},"metadata":{},"sourceType":"module"}