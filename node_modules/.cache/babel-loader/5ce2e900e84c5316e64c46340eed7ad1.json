{"ast":null,"code":"import _defineProperty from \"/Users/aschulte/Desktop/mockups/react-redux-firebase-authentication/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/aschulte/Desktop/mockups/react-redux-firebase-authentication/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/aschulte/Desktop/mockups/react-redux-firebase-authentication/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/aschulte/Desktop/mockups/react-redux-firebase-authentication/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/aschulte/Desktop/mockups/react-redux-firebase-authentication/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/aschulte/Desktop/mockups/react-redux-firebase-authentication/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/aschulte/Desktop/mockups/react-redux-firebase-authentication/src/components/Account/index.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { compose } from 'recompose';\nimport { Button, Icon, Input } from 'semantic-ui-react';\nimport { withAuthorization, withEmailVerification } from '../Session';\nimport { withFirebase } from '../Firebase';\nimport { PasswordForgetForm } from '../PasswordForget';\nimport PasswordChangeForm from '../PasswordChange'; // const SIGN_IN_METHODS = [\n//   {\n//     id: 'password',\n//     provider: null,\n//   },\n//   {\n//     id: 'google.com',\n//     provider: 'googleProvider',\n//   },\n//   {\n//     id: 'facebook.com',\n//     provider: 'facebookProvider',\n//   },\n//   {\n//     id: 'twitter.com',\n//     provider: 'twitterProvider',\n//   },\n// ];\n\nvar AccountPage = function AccountPage(_ref) {\n  var authUser = _ref.authUser;\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, \"Account: \", authUser.email), React.createElement(PasswordForgetForm, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }), React.createElement(PasswordChangeForm, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }), React.createElement(LoginManagement, {\n    authUser: authUser,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }));\n};\n\nvar LoginManagementBase =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(LoginManagementBase, _Component);\n\n  function LoginManagementBase(props) {\n    var _this;\n\n    _classCallCheck(this, LoginManagementBase);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(LoginManagementBase).call(this, props));\n\n    _this.fetchSignInMethods = function () {\n      _this.props.firebase.auth.fetchSignInMethodsForEmail(_this.props.authUser.email).then(function (activeSignInMethods) {\n        return _this.setState({\n          activeSignInMethods: activeSignInMethods,\n          error: null\n        });\n      }).catch(function (error) {\n        return _this.setState({\n          error: error\n        });\n      });\n    };\n\n    _this.onSocialLoginLink = function (provider) {\n      _this.props.firebase.auth.currentUser.linkWithPopup(_this.props.firebase[provider]).then(_this.fetchSignInMethods).catch(function (error) {\n        return _this.setState({\n          error: error\n        });\n      });\n    };\n\n    _this.onDefaultLoginLink = function (password) {\n      var credential = _this.props.firebase.emailAuthProvider.credential(_this.props.authUser.email, password);\n\n      _this.props.firebase.auth.currentUser.linkAndRetrieveDataWithCredential(credential).then(_this.fetchSignInMethods).catch(function (error) {\n        return _this.setState({\n          error: error\n        });\n      });\n    };\n\n    _this.onUnlink = function (providerId) {\n      _this.props.firebase.auth.currentUser.unlink(providerId).then(_this.fetchSignInMethods).catch(function (error) {\n        return _this.setState({\n          error: error\n        });\n      });\n    };\n\n    _this.state = {\n      activeSignInMethods: [],\n      error: null\n    };\n    return _this;\n  }\n\n  _createClass(LoginManagementBase, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.fetchSignInMethods();\n    } //   render() {\n    //     const { activeSignInMethods, error } = this.state;\n    //     return (\n    //       <div>\n    //         Sign In Methods:\n    //         <ul>\n    //           {SIGN_IN_METHODS.map(signInMethod => {\n    //             const onlyOneLeft = activeSignInMethods.length === 1;\n    //             const isEnabled = activeSignInMethods.includes(\n    //               signInMethod.id,\n    //             );\n    //             return (\n    //               <li key={signInMethod.id}>\n    //                 {signInMethod.id === 'password' ? (\n    //                   <DefaultLoginToggle\n    //                     onlyOneLeft={onlyOneLeft}\n    //                     isEnabled={isEnabled}\n    //                     signInMethod={signInMethod}\n    //                     onLink={this.onDefaultLoginLink}\n    //                     onUnlink={this.onUnlink}\n    //                   />\n    //                 ) : (\n    //                   <SocialLoginToggle\n    //                     onlyOneLeft={onlyOneLeft}\n    //                     isEnabled={isEnabled}\n    //                     signInMethod={signInMethod}\n    //                     onLink={this.onSocialLoginLink}\n    //                     onUnlink={this.onUnlink}\n    //                   />\n    //                 )}\n    //               </li>\n    //             );\n    //           })}\n    //         </ul>\n    //         {error && error.message}\n    //       </div>\n    //     );\n    //   }\n    // }\n    // const SocialLoginToggle = ({\n    //   onlyOneLeft,\n    //   isEnabled,\n    //   signInMethod,\n    //   onLink,\n    //   onUnlink,\n    // }) =>\n    //   isEnabled ? (\n    //     <Button\n    //       onClick={() => onUnlink(signInMethod.id)}\n    //       disabled={onlyOneLeft}\n    //     >\n    //       Deactivate {signInMethod.id}\n    //     </Button>\n    //   ) : (\n    //     <Button\n    //       onClick={() => onLink(signInMethod.provider)}\n    //     >\n    //       Link {signInMethod.id}\n    //     </Button>\n    //   );\n\n  }]);\n\n  return LoginManagementBase;\n}(Component);\n\nvar DefaultLoginToggle =\n/*#__PURE__*/\nfunction (_Component2) {\n  _inherits(DefaultLoginToggle, _Component2);\n\n  function DefaultLoginToggle(props) {\n    var _this2;\n\n    _classCallCheck(this, DefaultLoginToggle);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(DefaultLoginToggle).call(this, props));\n\n    _this2.onSubmit = function (event) {\n      event.preventDefault();\n\n      _this2.props.onLink(_this2.state.passwordOne);\n\n      _this2.setState({\n        passwordOne: '',\n        passwordTwo: ''\n      });\n    };\n\n    _this2.onChange = function (event) {\n      _this2.setState(_defineProperty({}, event.target.name, event.target.value));\n    };\n\n    _this2.state = {\n      passwordOne: '',\n      passwordTwo: ''\n    };\n    return _this2;\n  }\n\n  _createClass(DefaultLoginToggle, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          onlyOneLeft = _this$props.onlyOneLeft,\n          isEnabled = _this$props.isEnabled,\n          signInMethod = _this$props.signInMethod,\n          onUnlink = _this$props.onUnlink;\n      var _this$state = this.state,\n          passwordOne = _this$state.passwordOne,\n          passwordTwo = _this$state.passwordTwo;\n      var isInvalid = passwordOne !== passwordTwo || passwordOne === '';\n      return isEnabled ? React.createElement(Button, {\n        onClick: function onClick() {\n          return onUnlink(signInMethod.id);\n        },\n        disabled: onlyOneLeft,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      }, \"Deactivate \", signInMethod.id) : React.createElement(\"form\", {\n        onSubmit: this.onSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }, React.createElement(Input, {\n        name: \"passwordOne\",\n        value: passwordOne,\n        onChange: this.onChange,\n        type: \"password\",\n        placeholder: \"New Password\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }), React.createElement(Input, {\n        name: \"passwordTwo\",\n        value: passwordTwo,\n        onChange: this.onChange,\n        type: \"password\",\n        placeholder: \"Confirm New Password\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }), React.createElement(Button, {\n        disabled: isInvalid,\n        type: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208\n        },\n        __self: this\n      }, \"Link \", signInMethod.id));\n    }\n  }]);\n\n  return DefaultLoginToggle;\n}(Component);\n\nvar LoginManagement = withFirebase(LoginManagementBase);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    authUser: state.sessionState.authUser\n  };\n};\n\nvar condition = function condition(authUser) {\n  return !!authUser;\n};\n\nexport default compose(connect(mapStateToProps), withEmailVerification, withAuthorization(condition))(AccountPage);","map":{"version":3,"sources":["/Users/aschulte/Desktop/mockups/react-redux-firebase-authentication/src/components/Account/index.js"],"names":["React","Component","connect","compose","Button","Icon","Input","withAuthorization","withEmailVerification","withFirebase","PasswordForgetForm","PasswordChangeForm","AccountPage","authUser","email","LoginManagementBase","props","fetchSignInMethods","firebase","auth","fetchSignInMethodsForEmail","then","activeSignInMethods","setState","error","catch","onSocialLoginLink","provider","currentUser","linkWithPopup","onDefaultLoginLink","password","credential","emailAuthProvider","linkAndRetrieveDataWithCredential","onUnlink","providerId","unlink","state","DefaultLoginToggle","onSubmit","event","preventDefault","onLink","passwordOne","passwordTwo","onChange","target","name","value","onlyOneLeft","isEnabled","signInMethod","isInvalid","id","LoginManagement","mapStateToProps","sessionState","condition"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { compose } from 'recompose';\nimport { Button, Icon, Input } from 'semantic-ui-react'\n\nimport { withAuthorization, withEmailVerification } from '../Session';\nimport { withFirebase } from '../Firebase';\nimport { PasswordForgetForm } from '../PasswordForget';\nimport PasswordChangeForm from '../PasswordChange';\n\n// const SIGN_IN_METHODS = [\n//   {\n//     id: 'password',\n//     provider: null,\n//   },\n//   {\n//     id: 'google.com',\n//     provider: 'googleProvider',\n//   },\n//   {\n//     id: 'facebook.com',\n//     provider: 'facebookProvider',\n//   },\n//   {\n//     id: 'twitter.com',\n//     provider: 'twitterProvider',\n//   },\n// ];\n\nconst AccountPage = ({ authUser }) => (\n  <div>\n    <h1>Account: {authUser.email}</h1>\n    <PasswordForgetForm />\n    <PasswordChangeForm />\n    <LoginManagement authUser={authUser} />\n  </div>\n);\n\nclass LoginManagementBase extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      activeSignInMethods: [],\n      error: null,\n    };\n  }\n\n  componentDidMount() {\n    this.fetchSignInMethods();\n  }\n\n  fetchSignInMethods = () => {\n    this.props.firebase.auth\n      .fetchSignInMethodsForEmail(this.props.authUser.email)\n      .then(activeSignInMethods =>\n        this.setState({ activeSignInMethods, error: null }),\n      )\n      .catch(error => this.setState({ error }));\n  };\n\n  onSocialLoginLink = provider => {\n    this.props.firebase.auth.currentUser\n      .linkWithPopup(this.props.firebase[provider])\n      .then(this.fetchSignInMethods)\n      .catch(error => this.setState({ error }));\n  };\n\n  onDefaultLoginLink = password => {\n    const credential = this.props.firebase.emailAuthProvider.credential(\n      this.props.authUser.email,\n      password,\n    );\n\n    this.props.firebase.auth.currentUser\n      .linkAndRetrieveDataWithCredential(credential)\n      .then(this.fetchSignInMethods)\n      .catch(error => this.setState({ error }));\n  };\n\n  onUnlink = providerId => {\n    this.props.firebase.auth.currentUser\n      .unlink(providerId)\n      .then(this.fetchSignInMethods)\n      .catch(error => this.setState({ error }));\n  };\n\n//   render() {\n//     const { activeSignInMethods, error } = this.state;\n\n//     return (\n//       <div>\n//         Sign In Methods:\n//         <ul>\n//           {SIGN_IN_METHODS.map(signInMethod => {\n//             const onlyOneLeft = activeSignInMethods.length === 1;\n//             const isEnabled = activeSignInMethods.includes(\n//               signInMethod.id,\n//             );\n\n//             return (\n//               <li key={signInMethod.id}>\n//                 {signInMethod.id === 'password' ? (\n//                   <DefaultLoginToggle\n//                     onlyOneLeft={onlyOneLeft}\n//                     isEnabled={isEnabled}\n//                     signInMethod={signInMethod}\n//                     onLink={this.onDefaultLoginLink}\n//                     onUnlink={this.onUnlink}\n//                   />\n//                 ) : (\n//                   <SocialLoginToggle\n//                     onlyOneLeft={onlyOneLeft}\n//                     isEnabled={isEnabled}\n//                     signInMethod={signInMethod}\n//                     onLink={this.onSocialLoginLink}\n//                     onUnlink={this.onUnlink}\n//                   />\n//                 )}\n//               </li>\n//             );\n//           })}\n//         </ul>\n//         {error && error.message}\n//       </div>\n//     );\n//   }\n// }\n\n// const SocialLoginToggle = ({\n//   onlyOneLeft,\n//   isEnabled,\n//   signInMethod,\n//   onLink,\n//   onUnlink,\n// }) =>\n//   isEnabled ? (\n//     <Button\n//       onClick={() => onUnlink(signInMethod.id)}\n//       disabled={onlyOneLeft}\n//     >\n//       Deactivate {signInMethod.id}\n//     </Button>\n//   ) : (\n//     <Button\n//       onClick={() => onLink(signInMethod.provider)}\n//     >\n//       Link {signInMethod.id}\n//     </Button>\n//   );\n}\n\nclass DefaultLoginToggle extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { passwordOne: '', passwordTwo: '' };\n  }\n\n  onSubmit = event => {\n    event.preventDefault();\n\n    this.props.onLink(this.state.passwordOne);\n    this.setState({ passwordOne: '', passwordTwo: '' });\n  };\n\n  onChange = event => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n\n  render() {\n    const {\n      onlyOneLeft,\n      isEnabled,\n      signInMethod,\n      onUnlink,\n    } = this.props;\n\n    const { passwordOne, passwordTwo } = this.state;\n\n    const isInvalid =\n      passwordOne !== passwordTwo || passwordOne === '';\n\n    return isEnabled ? (\n      <Button\n        onClick={() => onUnlink(signInMethod.id)}\n        disabled={onlyOneLeft}\n      >\n        Deactivate {signInMethod.id}\n      </Button>\n    ) : (\n      <form onSubmit={this.onSubmit}>\n        <Input\n          name=\"passwordOne\"\n          value={passwordOne}\n          onChange={this.onChange}\n          type=\"password\"\n          placeholder=\"New Password\"\n        />\n        <Input\n          name=\"passwordTwo\"\n          value={passwordTwo}\n          onChange={this.onChange}\n          type=\"password\"\n          placeholder=\"Confirm New Password\"\n        />\n\n        <Button disabled={isInvalid} type=\"submit\">\n          Link {signInMethod.id}\n        </Button>\n      </form>\n    );\n  }\n}\n\nconst LoginManagement = withFirebase(LoginManagementBase);\n\nconst mapStateToProps = state => ({\n  authUser: state.sessionState.authUser,\n});\n\nconst condition = authUser => !!authUser;\n\nexport default compose(\n  connect(mapStateToProps),\n  withEmailVerification,\n  withAuthorization(condition),\n)(AccountPage);\n"]},"metadata":{},"sourceType":"module"}