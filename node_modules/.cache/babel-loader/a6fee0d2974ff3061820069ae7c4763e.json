{"ast":null,"code":"import _objectSpread from \"/Users/aschulte/Desktop/mockups/react-redux-firebase-authentication/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar INITIAL_STATE = {\n  messages: null,\n  limit: 5\n};\n\nvar applySetMessages = function applySetMessages(state, action) {\n  return _objectSpread({}, state, {\n    messages: action.messages\n  });\n};\n\nvar applySetMessagesLimit = function applySetMessagesLimit(state, action) {\n  return _objectSpread({}, state, {\n    limit: action.limit\n  });\n};\n\nfunction messageReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INITIAL_STATE;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'MESSAGES_SET':\n      {\n        return applySetMessages(state, action);\n      }\n\n    case 'MESSAGES_LIMIT_SET':\n      {\n        return applySetMessagesLimit(state, action);\n      }\n\n    default:\n      return state;\n  }\n}\n\nexport default messageReducer;","map":{"version":3,"sources":["/Users/aschulte/Desktop/mockups/react-redux-firebase-authentication/src/reducers/message.js"],"names":["INITIAL_STATE","messages","limit","applySetMessages","state","action","applySetMessagesLimit","messageReducer","type"],"mappings":";AAAA,IAAMA,aAAa,GAAG;AACpBC,EAAAA,QAAQ,EAAE,IADU;AAEpBC,EAAAA,KAAK,EAAE;AAFa,CAAtB;;AAKA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,KAAD,EAAQC,MAAR;AAAA,2BACpBD,KADoB;AAEvBH,IAAAA,QAAQ,EAAEI,MAAM,CAACJ;AAFM;AAAA,CAAzB;;AAKA,IAAMK,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACF,KAAD,EAAQC,MAAR;AAAA,2BACzBD,KADyB;AAE5BF,IAAAA,KAAK,EAAEG,MAAM,CAACH;AAFc;AAAA,CAA9B;;AAKA,SAASK,cAAT,GAAuD;AAAA,MAA/BH,KAA+B,uEAAvBJ,aAAuB;AAAA,MAARK,MAAQ;;AACrD,UAAQA,MAAM,CAACG,IAAf;AACE,SAAK,cAAL;AAAqB;AACnB,eAAOL,gBAAgB,CAACC,KAAD,EAAQC,MAAR,CAAvB;AACD;;AACD,SAAK,oBAAL;AAA2B;AACzB,eAAOC,qBAAqB,CAACF,KAAD,EAAQC,MAAR,CAA5B;AACD;;AACD;AACE,aAAOD,KAAP;AARJ;AAUD;;AAED,eAAeG,cAAf","sourcesContent":["const INITIAL_STATE = {\n  messages: null,\n  limit: 5,\n};\n\nconst applySetMessages = (state, action) => ({\n  ...state,\n  messages: action.messages,\n});\n\nconst applySetMessagesLimit = (state, action) => ({\n  ...state,\n  limit: action.limit,\n});\n\nfunction messageReducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n    case 'MESSAGES_SET': {\n      return applySetMessages(state, action);\n    }\n    case 'MESSAGES_LIMIT_SET': {\n      return applySetMessagesLimit(state, action);\n    }\n    default:\n      return state;\n  }\n}\n\nexport default messageReducer;\n"]},"metadata":{},"sourceType":"module"}