{"ast":null,"code":"import _objectSpread from \"/Users/aschulte/Desktop/mockups/auth-starter/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/aschulte/Desktop/mockups/auth-starter/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/aschulte/Desktop/mockups/auth-starter/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/aschulte/Desktop/mockups/auth-starter/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/aschulte/Desktop/mockups/auth-starter/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/aschulte/Desktop/mockups/auth-starter/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/aschulte/Desktop/mockups/auth-starter/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/aschulte/Desktop/mockups/auth-starter/src/components/Generate/index.js\";\nimport React, { Component } from 'react';\nimport DayPickerInput from \"react-day-picker/DayPickerInput\";\nimport \"react-day-picker/lib/style.css\";\nimport { formatDate, parseDate } from \"react-day-picker/moment\";\nimport \"moment/locale/it\"; // import moment from 'moment';\n\nimport QRCode from 'qrcode-react';\nimport { Header, Input, Form, Button } from 'semantic-ui-react';\nvar INITIAL_STATE = {\n  startDate: new Date(),\n  endDate: new Date(),\n  uniqueID: '',\n  error: null\n};\n\nvar GenerateQRCode =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(GenerateQRCode, _Component);\n\n  function GenerateQRCode(props) {\n    var _this;\n\n    _classCallCheck(this, GenerateQRCode);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(GenerateQRCode).call(this, props));\n\n    _this.onSubmit = function (event) {\n      console.log(_this.uniqueID);\n      console.log(_this.state.startDate);\n      console.log(_this.state.endDate);\n    };\n\n    _this.onChange = function (newDate) {\n      return _this.setState({\n        startDate: newDate\n      });\n    };\n\n    _this.state = _objectSpread({}, INITIAL_STATE);\n    _this.onChange = _this.onChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(GenerateQRCode, [{\n    key: \"render\",\n    value: function render() {\n      this.uniqueID = '1234567890123456789012345678901234567890';\n      var _this$state = this.state,\n          startDate = _this$state.startDate,\n          endDate = _this$state.endDate,\n          error = _this$state.error;\n      var isInvalid = startDate === null || endDate === null;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, React.createElement(Header, {\n        as: \"h1\",\n        textAlign: \"center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, \"Generate QR Code\"), React.createElement(Form, {\n        onSubmit: this.onSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, React.createElement(Form.Field, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, \"Title of event\"), React.createElement(Input, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      })), React.createElement(Form.Field, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, \"Select Event Dates\"), React.createElement(DayPickerInput, {\n        formatDate: formatDate,\n        parseDate: parseDate,\n        placeholder: \"\".concat(formatDate(new Date())),\n        value: this.state.startDate,\n        onChange: this.onChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      })), React.createElement(Form.Field, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, React.createElement(DayPickerInput, {\n        formatDate: formatDate,\n        parseDate: parseDate,\n        placeholder: \"\".concat(formatDate(new Date())),\n        value: this.state.endDate,\n        onChange: this.onChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      })), React.createElement(Button, {\n        fluid: true,\n        disabled: isInvalid,\n        type: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, \"Move to Payment\"), error && React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, error.message)), React.createElement(QRCode, {\n        value: this.uniqueID + this.state.startDate + this.state.endDate,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return GenerateQRCode;\n}(Component);\n\nexport { GenerateQRCode as default };","map":{"version":3,"sources":["/Users/aschulte/Desktop/mockups/auth-starter/src/components/Generate/index.js"],"names":["React","Component","DayPickerInput","formatDate","parseDate","QRCode","Header","Input","Form","Button","INITIAL_STATE","startDate","Date","endDate","uniqueID","error","GenerateQRCode","props","onSubmit","event","console","log","state","onChange","newDate","setState","bind","isInvalid","message"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport DayPickerInput from \"react-day-picker/DayPickerInput\";\nimport \"react-day-picker/lib/style.css\";\nimport { formatDate, parseDate } from \"react-day-picker/moment\";\nimport \"moment/locale/it\";\n// import moment from 'moment';\n\nimport QRCode from'qrcode-react';\nimport { Header, Input, Form, Button } from 'semantic-ui-react'\n\nconst INITIAL_STATE = {\n    startDate: new Date,\n    endDate: new Date,\n    uniqueID: '',\n    error: null,\n  };\n\n  export default class GenerateQRCode extends Component {\n    constructor(props) {\n      super(props);\n      this.state = { ...INITIAL_STATE };\n      this.onChange = this.onChange.bind(this);\n    }\n  \n    onSubmit = event => {\n      console.log(this.uniqueID)\n      console.log(this.state.startDate)\n      console.log(this.state.endDate)\n    };\n  \n    // onChange = event => {\n    //   this.setState({ [event.target.name]: event.target.value });\n      \n    // };\n    \n    onChange = newDate => this.setState({ startDate: newDate });\n  \n    render() {\n      this.uniqueID = '1234567890123456789012345678901234567890'\n      const { startDate, endDate, error } = this.state;\n      const isInvalid = startDate === null || endDate === null;\n      \n      return (\n    <div>\n    <Header as='h1' textAlign='center'>Generate QR Code</Header>\n      <Form onSubmit={this.onSubmit}>\n      <Form.Field>\n        <label>Title of event</label>\n        <Input\n            />\n        </Form.Field>\n        <Form.Field>\n        <label>Select Event Dates</label>\n        <DayPickerInput\n              formatDate={formatDate}\n              parseDate={parseDate}\n              placeholder={`${formatDate(new Date())}`}\n              value = {this.state.startDate}\n              onChange={this.onChange}\n            />\n        </Form.Field>\n        <Form.Field>\n        <DayPickerInput\n                formatDate={formatDate}\n                parseDate={parseDate}\n                placeholder={`${formatDate(new Date())}`}\n                value = {this.state.endDate}\n                onChange={this.onChange}\n              />\n        </Form.Field>\n        <Button fluid disabled={isInvalid} type=\"submit\">\n          Move to Payment\n        </Button>\n        {error && <p>{error.message}</p>}\n      </Form>\n      <QRCode value={this.uniqueID + this.state.startDate + this.state.endDate} />\n      </div>\n);\n}}"]},"metadata":{},"sourceType":"module"}